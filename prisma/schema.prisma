// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}


model Board {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId           String
  title           String
  imageId         String
  imageThumbUrl   String
  imageFullUrl    String 
  imageUserName   String
  imageLinkHTML   String

  lists            List[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model List {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  order           Int

  boardId         String @db.Uuid
  board           Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards           Card[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  order           Int
  description      String?

  listId          String @db.Uuid
  list            List @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([listId])

}


enum ACTION {
  CREATE
  UPDATE 
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD 
}
model AuditLog {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId           String
  action          ACTION
  entityId        String
  entityType      ENTITY_TYPE
  entityTitle     String
  userId          String
  userImage       String @db.String()
  userName        String @db.String()

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OrgLimit {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId           String  @unique
  count           Int @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OrgSubscription {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgId           String @unique
  stripeCustomerId    String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId    String? @unique @map(name: "stripe_subscription_id")
  stripePriceId           String?    @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd    DateTime? @map(name: "stripe_current_period_end")
}